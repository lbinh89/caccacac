#!/usr/bin/env node
/* eslint-disable no-restricted-globals,no-console */

/**
 * Module dependencies.
 */
const debug = require('debug')('proto-auto-reply:server');
const http = require('http');
const cluster = require('cluster');
const app = require('../dist/app');
const db = require('../dist/db');
const config = require('./../dist/config/config');
// FIXME: JSON server changes to single instance.
// const numCPUs = require('os').cpus().length;
const numCPUs = 1;

/**
 * Get port from environment and store in Express.
 */
const appPort = normalizePort(process.env.PORT || config.default.port.app);
app.set('port', appPort);

const dbPort = normalizePort(process.env.PORT || config.default.port.jsonServer);
db.set('port', dbPort);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const dbServer = http.createServer(db);

if (cluster.isMaster) {
  // Fork workers
  for (let i = 0; i< numCPUs; i++) {
    cluster.fork();
  }
  // If a worker dies, log it to the console and start another worker.
  cluster.on('exit', function(worker, code, signal) {
    console.log('Worker ' + worker.process.pid + ' died.');
    cluster.fork();
  });

  // Log when a worker starts listening
  cluster.on('listening', function(worker, address) {
    console.log('Worker started with PID ' + worker.process.pid + '.');
  });
} else {

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(config.default.port.app);
  server.on('error', onError);
  server.on('listening', onListening);

  dbServer.listen(config.default.port.jsonServer);
  dbServer.on('error', onError);
  dbServer.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port  ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case config.default.errors.errorCode.permissionDenied:
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case config.default.errors.errorCode.addressInUsed:
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
